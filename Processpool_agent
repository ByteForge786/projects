from concurrent.futures import ProcessPoolExecutor
from .nlp import Nlp
from .database import Database
import pandas as pd
from .chart import Chart
from .logging_utils import get_logger
import logging

class Agent:
    """
    Generates sql queries and fetches query results from the database.

    ... (existing docstring)

    Methods
    -------
    get_query(question, verbose=False, distinct=False)
        Function that returns a SQL query from the question.
    query_db(question, verbose=False, chart=None, size=(10, 10), distinct=False)
        Function that returns the response for the user question.
    """

    def __init__(self, data_dir, schema_dir=None, db_type='sqlite', username='', password='', database='db',
                 host='localhost', port=None, drop_db=True, aws_db=False, aws_s3=False, access_key_id="",
                 secret_access_key=""):
        """
        Constructs all the necessary attributes for the agent object.

        ... (existing docstring)

        """
        self.data_dir = data_dir
        self.schema_dir = schema_dir
        self.db_type = db_type
        self.username = username
        self.password = password
        self.database = database
        self.host = host
        self.port = port
        self.drop_db = drop_db
        self.aws_db = aws_db
        self.aws_s3 = aws_s3
        self.access_key_id = access_key_id
        self.secret_access_key = secret_access_key

    def get_query(self, question, verbose=False, distinct=False):
        """
        This function returns the SQL query from the question.

        ... (existing docstring)

        Returns
        ----------
        Returns a `str` of generated sql query.
        """
        nlp = Nlp(self.data_dir, self.schema_dir, self.aws_s3, self.access_key_id, self.secret_access_key)
        root_logger = logging.getLogger()
        if isinstance(self.data_dir, pd.DataFrame):
            df = self.data_dir
        else:
            df = nlp.csv_select(question)
        if df is None:
            print("Sorry, didn't catch that")
        else:
            if verbose:
                root_logger.setLevel(logging.INFO)
                logger = get_logger(__name__)

                # Use ProcessPoolExecutor for parallel execution
                with ProcessPoolExecutor() as executor:
                    sql_query = list(executor.map(lambda args: nlp.get_sql_query(*args, distinct=distinct),
                                                  [(df, question)]))[0]

                logger.info('SQL query = %s', sql_query)
                return sql_query
            else:
                root_logger.setLevel(logging.WARNING)

                # Execute sequentially without ProcessPoolExecutor
                sql_query = nlp.get_sql_query(df, question, distinct=distinct)
                return sql_query

    def query_db(self, question, verbose=False, chart=None, size=(10, 10), distinct=False):
        """
        This function returns the response for the user question.

        ... (existing docstring)

        Returns
        ----------
        Returns a `list` of 'tuple` of query outputs from Database.
        """
        query = self.get_query(question, verbose, distinct=distinct)
        database = Database(self.data_dir, self.schema_dir, self.aws_s3, self.access_key_id, self.secret_access_key)
        if self.aws_db:
            fetch_data = getattr(database, 'fetch_data_aws')
        else:
            fetch_data = getattr(database, 'fetch_data')

        # Use ProcessPoolExecutor for parallel execution
        with ProcessPoolExecutor() as executor:
            answers = list(executor.map(lambda q: fetch_data(question, q, self.db_type, self.username, self.password,
                                                             self.database, self.host, self.port, self.drop_db),
                                         [query]))

        if chart is not None:
            Chart(chart, query, answers[0], size)
        return answers
